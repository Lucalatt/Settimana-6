package it.lucal.app.config;

import java.util.Optional;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

import it.lucal.app.dao.UserDetailsImplService;
import it.lucal.app.dao.UtenteService;
import it.lucal.app.entity.Role;
import it.lucal.app.entity.Utente;

@Configuration
@EnableWebSecurity
public class WebSecurityConfig extends WebSecurityConfigurerAdapter {
	
	@Autowired
	private UserDetailsImplService udis;
	
	@Override
	protected void configure(HttpSecurity http) throws Exception {
		http.authorizeRequests()
				.antMatchers("/auth_update_utente_pw")
				.permitAll()
			.anyRequest()
				.authenticated()
			.and()
			.formLogin()
				.successForwardUrl("/login_success")
			.and()
				.logout()
			.and()
				.csrf()
				.disable();
	}
	
	@Override
	protected void configure(final AuthenticationManagerBuilder auth) throws Exception {
		auth
			.userDetailsService(udis)
			.passwordEncoder( passwordEncoder() );
	}
	
	@Bean
	public PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}
	
}

//@Configuration
//@EnableWebSecurity
//public class WebSecurityConfig extends WebSecurityConfigurerAdapter {
//	
//	@Autowired
//	UtenteService us;

//	@Override
//	protected void configure(HttpSecurity http) throws Exception {
//		
		/*
		 * gestisci le autorizzazioni
		 * permetti l'accesso a / e /page1 a tutti
		 * mentre a tutte le altre imponi autorizzazione e redirect sulla pagina
		 * di login
		 */
//		http
//			.authorizeRequests()					
//				.antMatchers( "/auth_update_user_pw")
//				.permitAll()
//			.anyRequest()
//				.authenticated()
//			.and()
//			.formLogin()
//				.successForwardUrl("/login_success")
//			.and()
//			.logout()
//			.and()
//			.csrf()
//				.disable();
//	}
	
	
	//@Override
//	protected void configure(final AuthenticationManagerBuilder auth) throws Exception {
//		Optional<Utente> authUserObj = us.getById(1);
//		Utente authUser = authUserObj.get();
//		String role = "USER";
//		Set<Role> roles = authUser.getRoles();
//		
//		for( Role r : roles ) {
//			if( r.getType().toString().contains("ADMIN") ) {
//				role = "ADMIN";
//				break;
//			}
//		}
//		
//		auth.inMemoryAuthentication()
//			.withUser( authUser.getUsername() ).password( passwordEncoder().encode( authUser.getPassword() ) )
//			.roles(role);
//	}
	
//	@Autowired
//	private UserDetailsImplService usd;
//	
//	// v2 bd con userdetailsimpl
//	@Override
//	protected void configure(final AuthenticationManagerBuilder auth) throws Exception {
//		auth
//			.userDetailsService(usd)
//			.passwordEncoder( passwordEncoder() );
//	}
//	
//	@Bean
//	public PasswordEncoder passwordEncoder() {
//		return new BCryptPasswordEncoder();
//	}
//	
//}
